// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ü—Ä–∏–∫–ª–∞–¥—É 4 - WebSockets!
// –¶–µ –≤–µ—Ä—à–∏–Ω–∞ –≤–µ–±-–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ. WebSockets –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å
// –ø–æ—Å—Ç—ñ–π–Ω–µ, –¥–≤–æ—Å–ø—Ä—è–º–æ–≤–∞–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –º—ñ–∂ –∫–ª—ñ—î–Ω—Ç–æ–º —ñ —Å–µ—Ä–≤–µ—Ä–æ–º.
// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –º–∏—Ç—Ç—î–≤–æ –≤ –æ–±–æ—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏.

const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');

// üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –°—Ç–≤–æ—Ä—é—î–º–æ Express –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —ñ HTTP —Å–µ—Ä–≤–µ—Ä
const app = express();
const server = http.createServer(app);

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –°—Ç–≤–æ—Ä—é—î–º–æ WebSocket —Å–µ—Ä–≤–µ—Ä, –ø—Ä–∏—î–¥–Ω–∞–Ω–∏–π –¥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞
// –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ HTTP, —ñ WebSocket –Ω–∞ –æ–¥–Ω–æ–º—É –ø–æ—Ä—Ç—É
const wss = new WebSocket.Server({ server });

const PORT = 3000;

// üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –ø–∞–º'—è—Ç—ñ
const messages = [];
const clients = new Map(); // –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤

// üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: Middleware
app.use(express.json());
app.use(express.static(__dirname));

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: HTTP –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
// –ù–∞–≤—ñ—Ç—å –∑ WebSockets –Ω–∞–º —á–∞—Å—Ç–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω HTTP –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
app.get('/messages', (req, res) => {
    console.log(`üì• HTTP: Sending ${messages.length} initial messages`);
    res.json(messages);
});

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–Ω–∏–∫ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è
// –û—Å—å –¥–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –º–∞–≥—ñ—è!
wss.on('connection', (ws, req) => {
    // üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –í–∏—Ç—è–≥—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—è–¥–∫–∞ –∑–∞–ø–∏—Ç—É
    const url = new URL(req.url, `http://${req.headers.host}`);
    const username = url.searchParams.get('user') || '–ê–Ω–æ–Ω—ñ–º';
    
    // üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∫–ª—ñ—î–Ω—Ç–∞
    const client = {
        id: Date.now() + Math.random(),
        username: username,
        ws: ws,
        connectedAt: new Date()
    };
    
    clients.set(client.id, client);
    console.log(`üîå WebSocket: ${username} connected (${clients.size} total clients)`);
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–º—É –∫–ª—ñ—î–Ω—Ç—É
    ws.send(JSON.stringify({
        type: 'welcome',
        message: `Welcome ${username}! You are connected via WebSocket.`,
        connectedClients: clients.size
    }));
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–æ–≤–æ–º—É –∫–ª—ñ—î–Ω—Ç—É
    const currentUsers = Array.from(clients.values()).map(c => c.username);
    ws.send(JSON.stringify({
        type: 'user_list',
        users: currentUsers
    }));
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–æ –Ω–æ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è
    broadcast({
        type: 'user_joined',
        username: username,
        connectedClients: clients.size,
        timestamp: new Date().toISOString()
    }, client.id); // –í–∏–∫–ª—é—á–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    ws.on('message', (data) => {
        try {
            const payload = JSON.parse(data);
            console.log(`üì® WebSocket: Message from ${username}:`, payload);
            
            // üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            switch (payload.type) {
                case 'message':
                    handleChatMessage(client, payload);
                    break;
                    
                case 'ping':
                    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ ping –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
                    ws.send(JSON.stringify({ type: 'pong' }));
                    break;
                    
                default:
                    console.log(`‚ö†Ô∏è Unknown message type: ${payload.type}`);
            }
            
        } catch (error) {
            console.error('‚ùå Error processing message:', error);
        }
    });
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
    ws.on('close', () => {
        clients.delete(client.id);
        console.log(`üëã WebSocket: ${username} disconnected (${clients.size} remaining)`);
        
        // –°–ø–æ–≤—ñ—â–∞—î–º–æ –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        broadcast({
            type: 'user_left',
            username: username,
            connectedClients: clients.size,
            timestamp: new Date().toISOString()
        });
    });
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ WebSocket
    ws.on('error', (error) => {
        console.error(`‚ùå WebSocket error for ${username}:`, error.message);
    });
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ù–∞–¥—Å–∏–ª–∞—î–º–æ heartbeat –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
    // –¶–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ/—Ñ–∞–π—Ä–≤–æ–ª–∏
    const heartbeat = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ type: 'heartbeat' }));
        } else {
            clearInterval(heartbeat);
        }
    }, 30000);
});

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Ç—É
function handleChatMessage(client, payload) {
    // üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const message = {
        id: messages.length + 1,
        user: client.username,
        text: payload.text,
        timestamp: new Date().toISOString()
    };
    
    // üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    messages.push(message);
    
    // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –†–æ–∑—Å–∏–ª–∞—î–º–æ –í–°–Ü–ú –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º
    // –û—Å—å —É —á–æ–º—É –∫—Ä–∞—Å–∞ WebSockets - –º–∏—Ç—Ç—î–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∞!
    const messageData = {
        type: 'message',
        message: message
    };
    
    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º, –≤–∫–ª—é—á–∞—é—á–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    clients.forEach((client) => {
        if (client.ws.readyState === WebSocket.OPEN) {
            client.ws.send(JSON.stringify(messageData));
        }
    });
    
    console.log(`‚ú® Broadcasted message to ${clients.size} clients instantly!`);
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
function broadcast(data, excludeClientId = null) {
    const message = JSON.stringify(data);
    
    clients.forEach((client, clientId) => {
        if (clientId !== excludeClientId && client.ws.readyState === WebSocket.OPEN) {
            client.ws.send(message);
        }
    });
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ï–Ω–¥–ø–æ—ñ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
app.get('/stats', (req, res) => {
    const clientList = Array.from(clients.values()).map(client => ({
        username: client.username,
        connectedDuration: Math.floor((Date.now() - client.connectedAt) / 1000) + 's'
    }));
    
    res.json({
        totalMessages: messages.length,
        connectedClients: clients.size,
        clients: clientList,
        serverUptime: Math.floor(process.uptime()) + 's'
    });
});

// üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
    console.log(`üöÄ WebSocket Server running on http://localhost:${PORT}`);
    console.log('üìù –ü—Ä–∏–∫–ª–∞–¥ 4: –°–ø—Ä–∞–≤–∂–Ω—è –¥–≤–æ—Å–ø—Ä—è–º–æ–≤–∞–Ω–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ');
    console.log('üîå WebSocket –µ–Ω–¥–ø–æ—ñ–Ω—Ç: ws://localhost:' + PORT);
    
    console.log('\n‚ú® WebSocket Advantages:');
    console.log('   - True real-time (messages delivered instantly)');
    console.log('   - Bidirectional (server can push anytime)');
    console.log('   - Minimal overhead (no HTTP headers after handshake)');
    console.log('   - Persistent connection (no reconnection needed)');
    console.log('   - Efficient (binary or text data)');
    
    console.log('\n‚ö†Ô∏è  WebSocket Considerations:');
    console.log('   - Requires WebSocket support (modern browsers have it)');
    console.log('   - May be blocked by some proxies/firewalls');
    console.log('   - Need to handle reconnection on client');
    console.log('   - Stateful (server must track connections)\n');
});

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: WebSockets —É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ:
// - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è: Slack, Discord, —Ç–æ—Ä–≥–æ–≤—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏, –æ–Ω–ª–∞–π–Ω —ñ–≥—Ä–∏
// - –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Redis pub/sub –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–µ—Ä–≤–µ—Ä—ñ–≤
// - –ë–µ–∑–ø–µ–∫–∞: –≤–∞–ª—ñ–¥—É–π—Ç–µ/–æ—á–∏—â–∞–π—Ç–µ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
// - –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –∑–∞–±–µ–∑–ø–µ—á—Ç–µ –¥–æ–≤–≥–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —è–∫ —Ä–µ–∑–µ—Ä–≤

// ‚ö° –¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç: WebSocket –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–∏–∫–æ–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ "—Ä—É–∫–æ—Å—Ç–∏—Å–∫–∞–Ω–Ω—è"
// –ø–æ—á–∏–Ω–∞—é—á–∏ —è–∫ HTTP, –∞ –ø–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—é—á–∏—Å—å –¥–æ WebSocket. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏
// —Ü–µ –≤ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —è–∫ "101 Switching Protocols"!
