// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ü—Ä–∏–∫–ª–∞–¥ 4 - WebSocket —á–∞—Ç-–∫–ª—ñ—î–Ω—Ç
// –¶–µ –≤–∏—Å—à–∞ –µ–≤–æ–ª—é—Ü—ñ—è! WebSockets –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –ø–æ—Å—Ç—ñ–π–Ω–µ, –ø–æ–≤–Ω–æ–¥—É–ø–ª–µ–∫—Å–Ω–µ
// –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –º–∏—Ç—Ç—î–≤–æ –≤ –æ–±–æ—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏.
// –ù—ñ—è–∫–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –Ω—ñ—è–∫–æ–≥–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è - —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ!

// üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞ —Å—Ç–∞–Ω
const username = new URLSearchParams(window.location.search).get('user') || '–ê–Ω–æ–Ω—ñ–º';
let ws = null;
let reconnectAttempts = 0;
let latencyInterval = null;
let lastPingTime = 0;
const connectedUsers = new Set();

// üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
document.getElementById('currentUser').textContent = `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${username}`;

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –∑ –≤—ñ–∑—É–∞–ª—å–Ω–æ—é –∫–æ–Ω—Å–æ–ª–ª—é
function debugLog(message, type = 'info') {
    const debugConsole = document.getElementById('debugConsole');
    const entry = document.createElement('div');
    entry.className = 'debug-entry';
    
    const time = document.createElement('span');
    time.className = 'debug-time';
    time.textContent = new Date().toLocaleTimeString();
    
    const msg = document.createElement('span');
    msg.className = `debug-message ${type}`;
    msg.textContent = message;
    
    entry.appendChild(time);
    entry.appendChild(msg);
    debugConsole.appendChild(entry);
    
    // –ó–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤
    while (debugConsole.children.length > 10) {
        debugConsole.removeChild(debugConsole.firstChild);
    }
    
    debugConsole.scrollTop = debugConsole.scrollHeight;
    console.log(`[${type.toUpperCase()}] ${message}`);
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–Ω–æ–≤–ª—é—î–º–æ UI —Å—Ç–∞—Ç—É—Å—É –∑'—î–¥–Ω–∞–Ω–Ω—è
function updateConnectionStatus(connected) {
    const indicator = document.getElementById('wsIndicator');
    const text = document.getElementById('connectionText');
    
    if (connected) {
        indicator.classList.add('connected');
        text.textContent = '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket';
    } else {
        indicator.classList.remove('connected');
        text.textContent = '–í—ñ–¥–∫–ª—é—á–µ–Ω–æ';
    }
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function updateUserList() {
    const userList = document.getElementById('userList');
    const userCount = document.getElementById('userCount');
    
    userList.innerHTML = '';
    connectedUsers.forEach(user => {
        const userItem = document.createElement('div');
        userItem.className = 'user-item';
        userItem.innerHTML = `
            <div class="user-status"></div>
            <span>${user}</span>
        `;
        userList.appendChild(userItem);
    });
    
    userCount.textContent = connectedUsers.size;
}

// üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º—ñ—Ç–∫–∏ —á–∞—Å—É
function formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('en-US', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç–∏–ª—è–º–∏
function displayMessage(data, isOwn = false) {
    const messagesDiv = document.getElementById('messages');
    
    if (data.type === 'system') {
        // –°–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è/–ø–æ–∫–∏–Ω—É–≤)
        const systemMsg = document.createElement('div');
        systemMsg.className = 'system-message';
        systemMsg.textContent = data.text;
        messagesDiv.appendChild(systemMsg);
    } else {
        // –ó–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Ç—É
        const messageElement = document.createElement('div');
        messageElement.className = 'message' + (isOwn ? ' own' : '');
        messageElement.innerHTML = `
            <span class="username">${data.user}:</span>
            <span class="text">${data.text}</span>
            <span class="timestamp">${formatTime(data.timestamp)}</span>
        `;
        messagesDiv.appendChild(messageElement);
    }
    
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ HTTP
async function loadInitialMessages() {
    try {
        debugLog('–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...', 'info');
        const response = await fetch('/messages');
        const messages = await response.json();
        
        messages.forEach(msg => {
            displayMessage({
                user: msg.user,
                text: msg.text,
                timestamp: msg.timestamp
            }, msg.user === username);
        });
        
        debugLog(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${messages.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —ñ—Å—Ç–æ—Ä—ñ—ó`, 'success');
    } catch (error) {
        debugLog(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é: ${error.message}`, 'error');
    }
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
function connectWebSocket() {
    // üîß –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ö–æ–Ω—Å—Ç—Ä—É—é—î–º–æ WebSocket URL –∑ —ñ–º–µ–Ω–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}?user=${encodeURIComponent(username)}`;
    
    debugLog(`Connecting to WebSocket: ${wsUrl}`, 'info');
    
    try {
        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –°—Ç–≤–æ—Ä—é—î–º–æ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è
        ws = new WebSocket(wsUrl);
        
        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ó'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ
        ws.onopen = () => {
            debugLog('WebSocket –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
            updateConnectionStatus(true);
            reconnectAttempts = 0;
            
            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞—Ç—Ä–∏–º–∫–∏
            startLatencyMonitoring();
        };
        
        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        ws.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                
                switch (data.type) {
                    case 'welcome':
                        debugLog(data.message, 'success');
                        break;
                        
                    case 'user_list':
                        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                        connectedUsers.clear();
                        data.users.forEach(user => connectedUsers.add(user));
                        updateUserList();
                        debugLog(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${data.users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–ª–∞–π–Ω`, 'success');
                        break;
                        
                    case 'message':
                        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ú–∏—Ç—Ç—î–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!
                        displayMessage({
                            user: data.message.user,
                            text: data.message.text,
                            timestamp: data.message.timestamp
                        }, data.message.user === username);
                        debugLog(`–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${data.message.user}`, 'info');
                        break;
                        
                    case 'user_joined':
                        connectedUsers.add(data.username);
                        updateUserList();
                        displayMessage({
                            type: 'system',
                            text: `${data.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É`
                        });
                        debugLog(`${data.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è`, 'info');
                        break;
                        
                    case 'user_left':
                        connectedUsers.delete(data.username);
                        updateUserList();
                        displayMessage({
                            type: 'system',
                            text: `${data.username} –ø–æ–∫–∏–Ω—É–≤ —á–∞—Ç`
                        });
                        debugLog(`${data.username} –ø–æ–∫–∏–Ω—É–≤`, 'info');
                        break;
                        
                    case 'pong':
                        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
                        const latency = Date.now() - lastPingTime;
                        document.getElementById('latency').textContent = `–ó–∞—Ç—Ä–∏–º–∫–∞: ${latency}–º—Å`;
                        break;
                        
                    case 'heartbeat':
                        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –°–µ—Ä–≤–µ—Ä–Ω–∏–π heartbeat –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
                        debugLog('‚ù§Ô∏è Heartbeat –æ—Ç—Ä–∏–º–∞–Ω–æ', 'info');
                        break;
                        
                    default:
                        console.log('Unknown message type:', data.type);
                }
                
            } catch (error) {
                debugLog(`Error parsing message: ${error.message}`, 'error');
            }
        };
        
        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
        ws.onclose = (event) => {
            debugLog(`Connection closed: ${event.reason || 'Unknown reason'}`, 'error');
            updateConnectionStatus(false);
            stopLatencyMonitoring();
            
            // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            connectedUsers.clear();
            updateUserList();
            
            // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–º –≤—ñ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è–º
            const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 30000);
            reconnectAttempts++;
            
            debugLog(`–ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${delay/1000}—Å... (—Å–ø—Ä–æ–±–∞ ${reconnectAttempts})`, 'info');
            setTimeout(connectWebSocket, delay);
        };
        
        // üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏
        ws.onerror = (error) => {
            debugLog('WebSocket error occurred', 'error');
            console.error('WebSocket error:', error);
        };
        
    } catch (error) {
        debugLog(`Failed to create WebSocket: ${error.message}`, 'error');
    }
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ WebSocket
function sendMessage() {
    const input = document.getElementById('messageInput');
    const text = input.value.trim();
    
    if (!text || !ws || ws.readyState !== WebSocket.OPEN) {
        return;
    }
    
    // üéì Teaching Comment: Send message instantly via WebSocket
    const message = {
        type: 'message',
        text: text
    };
    
    ws.send(JSON.stringify(message));
    input.value = '';
    input.focus();
    
    debugLog('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ WebSocket', 'success');
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞—Ç—Ä–∏–º–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
function startLatencyMonitoring() {
    latencyInterval = setInterval(() => {
        if (ws && ws.readyState === WebSocket.OPEN) {
            lastPingTime = Date.now();
            ws.send(JSON.stringify({ type: 'ping' }));
        }
    }, 5000); // –ü—ñ–Ω–≥ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
}

function stopLatencyMonitoring() {
    if (latencyInterval) {
        clearInterval(latencyInterval);
        latencyInterval = null;
        document.getElementById('latency').textContent = '–ó–∞—Ç—Ä–∏–º–∫–∞: --–º—Å';
    }
}

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
document.addEventListener('DOMContentLoaded', async () => {
    debugLog('üöÄ WebSocket —á–∞—Ç-–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...', 'info');
    debugLog(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${username}`, 'info');
    
    // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await loadInitialMessages();
    
    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    connectWebSocket();
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    document.getElementById('sendButton').addEventListener('click', sendMessage);
    document.getElementById('messageInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
    
    document.getElementById('messageInput').focus();
});

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –û—á–∏—â–∞—î–º–æ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('beforeunload', () => {
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.close();
    }
});

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ü–æ–≥–ª–∏–±–ª–µ–Ω–∏–π –æ–≥–ª—è–¥ WebSocket –ø—Ä–æ—Ç–æ–∫–æ–ª—É:
// 1. –ó'—î–¥–Ω–∞–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ HTTP —Ä—É–∫–æ—Å—Ç–∏—Å–∫–∞–Ω–Ω—è (–∑–∞–ø–∏—Ç Upgrade)
// 2. –°–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î 101 Switching Protocols
// 3. –ó'—î–¥–Ω–∞–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –¥–æ WebSocket –ø—Ä–æ—Ç–æ–∫–æ–ª—É
// 4. –ë—ñ–Ω–∞—Ä–Ω—ñ –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ —Ñ—Ä–µ–π–º–∏ –º–æ–∂—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è –≤ –æ–±–æ—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö
// 5. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (2-14 –±–∞–π—Ç –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
// 6. –í–±—É–¥–æ–≤–∞–Ω–∏–π ping/pong –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –∑'—î–¥–Ω–∞–Ω–Ω—è

// ‚ö° –¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç: WebSockets –º–æ–∂—É—Ç—å –æ–±—Ä–æ–±–ª—è—Ç–∏ 50,000+ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
// –Ω–∞ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!

// üéì –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: –ß–æ–º—É WebSockets –∫—Ä–∞—â—ñ:
// - –°–ø—Ä–∞–≤–∂–Ω—ñ–π real-time (–±–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏)
// - –î–≤–æ—Å–ø—Ä—è–º–æ–≤–∞–Ω—ñ (—Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç)
// - –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ (–º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ø—ñ—Å–ª—è —Ä—É–∫–æ—Å—Ç–∏—Å–∫–∞–Ω–Ω—è)
// - –ü–æ—Å—Ç—ñ–π–Ω—ñ (–Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è)
// - –®–∏—Ä–æ–∫–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ (–≤—Å—ñ —Å—É—á–∞—Å–Ω—ñ –±—Ä–∞—É–∑–µ—Ä–∏)
// - –Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: —á–∞—Ç—É, —ñ–≥–æ—Ä, —Ç–æ—Ä–≥—ñ–≤–ª—ñ, —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ
